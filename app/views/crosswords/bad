<div class="row">
  <%= form_for(@crossword) do |f| %><div class="span5">
    <% if @crossword.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@crossword.errors.count, "error") %> prohibited this crossword from being saved:</h2>
        <ul>
        <% @crossword.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
    <% end %>
    <%= f.hidden_field :bonus_value %>
    <%= f.hidden_field :bonus_word %>
    <%= f.fields_for :word_items do |w| %>
      <%= w.hidden_field :text_value %><%= w.hidden_field :triple_letter_index %><%= w.hidden_field :x_coordinate %><%= w.hidden_field :y_coordinate %><%= w.hidden_field :is_horizontal %>
    <% end %>
    <%= f.submit %>
  </div>
  <div class="span7">
    <table id="cardroot" class="xw-grid">
      <tr>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="10" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="42" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="34" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="22" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="112" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="84" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="24" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="1" height="1" border="0"></td>
      </tr>
      <tr valign="top">
        <td colspan="11"><img name="card_00" src="<%= path_to_image 'card/card_00.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="5" colspan="2"><img name="card_01" src="<%= path_to_image 'card/card_01.jpg' %>"></td>
        <td rowspan="3" colspan="3">
          <table id="reveal" class="xwt-grid">
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="2"><img name="card_03" src="<%= path_to_image 'card/card_03.jpg' %>"></td>
        <td>
          <table id="bonusvalue" class="xwt-grid">
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="3"><img name="card_05" src="<%= path_to_image 'card/card_05.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td><img name="card_06" src="<%= path_to_image 'card/card_06.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="2"><img name="card_07" src="<%= path_to_image 'card/card_07.jpg' %>"></td>
        <td colspan="3">
          <table id="bonusword" class="xwt-grid">
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="2"><img name="card_09" src="<%= path_to_image 'card/card_09.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="3"><img name="card_10" src="<%= path_to_image 'card/card_10.jpg' %>"></td>
        <td colspan="3"><img name="card_11" src="<%= path_to_image 'card/card_11.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="2"><img name="card_12" src="<%= path_to_image 'card/card_12.jpg' %>"></td>
        <td rowspan="3" colspan="6"><table id="lettergrid">
              <% for ii in (0..10) do %>
              <tr>
                <td><div data-rowid="<%= ii %>" data-colid="0" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="1" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="2" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="3" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="4" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="5" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="6" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="7" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="8" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="9" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="10" data-content="" class="xw-cell">
              </tr>
              <% end %>
            </table></td>
        <td rowspan="4"><img name="card_14" src="<%= path_to_image 'card/card_14.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="3"><img name="card_15" src="<%= path_to_image 'card/card_15.jpg' %>"></td>
        <td colspan="2"><img name="card_16" src="<%= path_to_image 'card/card_16.jpg' %>"></td>
        <td rowspan="3"><img name="card_17" src="<%= path_to_image 'card/card_17.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="2" colspan="2"><img name="card_18" src="<%= path_to_image 'card/card_18.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="6"><img name="card_19" src="<%= path_to_image 'card/card_19.jpg' %>"></td>
      </tr>
    </table>
  <% end %></div>
</div>
<script type="text/javascript">
// TODO LIST:
// P1:
// -- Rudimentary Bonus, Tripling, Your Letter Fields
// -- Reading hidden form fields in during initialize for edit
// -- AJAX call to load different card state without page reload
// -- AJAX call to wait on payout stats update on save
// -- AJAX call to save and update payout stats on edit
// P2:
// -- Bonus word UI
// -- Your Letters UI
// -- Tripling Modifier UI
// P3:
// -- Check for cell clicks that cannot grow out to 3 characters
// -- Check for direction toggle capability on cursor movement
// -- Bootstrap dialogs
// -- Cursor blinking
  var $editorCell = null;
  var $allCellRows = [];
  // var $allCellCols = [];
  var $horizontalMode = true;
  var $directionChangeOk = true;
  var $rootTable = $('#lettergrid');
  var $wordCount = 0;
  
  var $valueImages = $( {
    blank: "<%= path_to_image 'slice/blank.png' %>",
    unk: "<%= path_to_image 'val/unk.png' %>",
    A: "<%= path_to_image 'val/A.png' %>", B: "<%= path_to_image 'val/B.png' %>",
    C: "<%= path_to_image 'val/C.png' %>", D: "<%= path_to_image 'val/D.png' %>",
    E: "<%= path_to_image 'val/E.png' %>", F: "<%= path_to_image 'val/F.png' %>",
    G: "<%= path_to_image 'val/G.png' %>", H: "<%= path_to_image 'val/H.png' %>",
    I: "<%= path_to_image 'val/I.png' %>", J: "<%= path_to_image 'val/J.png' %>",
    K: "<%= path_to_image 'val/K.png' %>", L: "<%= path_to_image 'val/L.png' %>",
    M: "<%= path_to_image 'val/M.png' %>", N: "<%= path_to_image 'val/N.png' %>",
    O: "<%= path_to_image 'val/O.png' %>", P: "<%= path_to_image 'val/P.png' %>",
    Q: "<%= path_to_image 'val/Q.png' %>", R: "<%= path_to_image 'val/R.png' %>",
    S: "<%= path_to_image 'val/S.png' %>", T: "<%= path_to_image 'val/T.png' %>",
    U: "<%= path_to_image 'val/U.png' %>", V: "<%= path_to_image 'val/V.png' %>",
    W: "<%= path_to_image 'val/W.png' %>", X: "<%= path_to_image 'val/X.png' %>",
    Y: "<%= path_to_image 'val/Y.png' %>", Z: "<%= path_to_image 'val/Z.png' %>"
  } );
    
  function initialize() {
    var contentTmpl = 
      '<img class="xw-value" src="<%= path_to_image 'val/blank.png'%>"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-border xw-htop" src="<%= path_to_image 'border/htop.png' %>" /><img class="xw-border xw-hmid" src="<%= path_to_image 'border/hmid.png' %>" /><img class="xw-border xw-hend" src="<%= path_to_image 'border/hend.png' %>" /><img class="xw-border xw-vtop" src="<%= path_to_image 'border/vtop.png' %>" /><img class="xw-border xw-vmid" src="<%= path_to_image 'border/vmid.png' %>" /><img class="xw-border xw-vend" src="<%= path_to_image 'border/vend.png' %>" /><img class="xw-fill xw-initial" src="<%= path_to_image 'fill/pink2.png' %>" /><img class="xw-fill xw-revealed" src="<%= path_to_image 'fill/brite1.png' %>" /><img class="xw-fill xw-selected" src="<%= path_to_image 'fill/brite1.png' %>" /></div></td>';
    var selectRowTmpl = 'div[data-rowid="{row}"]';
    var selectColTmpl = 'div[data-colid="{col}"]';

    // Iterate through the cells in document order, adding image data to
    // each cell and building a horizontal doubly linked lists connecting
    // immediate neighbors for horizontal navigability.
    for (var row=0;row<11;row++) {
      var cellLeft = null;
      $allCellRows[row] = $(selectRowTmpl.format( {row: row}, $rootTable ));

      $allCellRows[row].append(contentTmpl);

      $allCellRows[row].each(
        function(colIdx, nextCell) { 
          nextCell.sameRow = $allCellRows[row];
          nextCell.row     = row;
          nextCell.toLeft  = cellLeft;
          nextCell.toRight = null;

          nextCell.sameCol = null;
          nextCell.col     = colIdx;
          nextCell.toAbove = null;
          nextCell.toBelow = null;

          if (cellLeft != null) { cellLeft.toRight = nextCell; }
          cellLeft = nextCell;
        }
      );
    }

    // Populate a second double linked list between cells in the same column
    // for vertical navigability, and add functions for use by the click and
    // keyboard event handlers that derive subsets of connected cells for word
    // boundary highlighting and cursor position management.
    for (var col=0;col<11;col+=1) {
      var cellAbove = null;
      var sameCol = $(selectColTmpl.format({col: col}, $rootTable));
      // $allCellCols[col] = sameCol

      sameCol.each(
        function(rowIdx, nextCell) { 
          nextCell.sameCol = sameCol;
          nextCell.toAbove = cellAbove;

          if (cellAbove != null) { cellAbove.toBelow = nextCell; }
          cellAbove = nextCell;

          // Validation sanity check
          if (nextCell.col != col) { alert(nextCell.col + " != " + col); }
          if (nextCell.row != rowIdx) { alert(nextCell.row + " != " + rowIdx); }
        }
      );
    } <!-- Latter of two intialization "for" loops.

    // Set a handler for the table, setup to recieve calls from 
    $rootTable.on('click', 'div.xw-cell', onClickCell);
  }

  //
  // Javascript Event Handlers
  //

  function onClickCell(event) {
    // If another word is already active, close it out.
    if ($editorCell != null) { closeWordEditor(); }
  
    var wrap = $(this); // $(event.target).parent();
    var row = wrap.data('rowid');
    var col = wrap.data('colid');
    var cellState = $allCellRows[row].eq(col).get()[0];
  
    if (isBlank(cellState)) {
      if ($wordCount >= 22) {
        // If no more words remain, disallow selections that would increase
        // the word count.
        showMaxWordsError();
        return false;
      }

      if (! isBlank(cellState.toLeft)) {
        if (! isBlank(cellState.toRight)) {
          return showHorizontalMergeError(cellState);
        } else if (! isBlank(cellState.toAbove)) {
          if (! isBlank(cellState.toBelow)) {
            return showVerticalMergeError(cellState);
          }
          if (! isBlank(cellState.toAbove.toLeft)) {
            return showCongestionError(
              cellState, cellState.toLeft, cellState.toAbove);
          }
        } else if (! isBlank(cellState.toBelow)) {
          if (! isBlank(cellState.toBelow.toLeft)) {
            return showCongestionError(
              cellState, cellState.toLeft, cellState.toBelow);
          }
        }
      } else if (! isBlank(cellState.toRight)) {
        if (! isBlank(cellState.toAbove)) {
          if (! isBlank(cellState.toBelow)) {
            return showVerticalMergeError(cellState);
          }
          if (! isBlank(cellState.toAbove.toRight)) {
            return showCongestionError(
              cellState, cellState.toRight, cellState.toAbove);
          }
        } else if (! isBlank(cellState.toBelow)) {
          if (! isBlank(cellState.toBelow.toRight)) {
            return showCongestionError(
              cellState, cellState.toRight, cellState.toBelow);
          }
        }
      } else if ((! isBlank(cellState.toAbove)) &&
                 (! isBlank(cellState.toBelow))) {
        return showVerticalMergeError(cellState);
      }

      // TODO: Account for clicks at the end of a word in the same orientation
      // TODO: Account for clicks at the head of a word in either orientation
      // TODO: Account for clicks at the end of a word in the alt direction
      // TODO: Remove the hack that follows!
      if( $horizontalMode ) {
        $(cellState).addClass('xw-htop xw-hend');
      } else {
        $(cellState).addClass('xw-vtop xw-vend');
      }
    }
  
    $editorCell = cellState;
  
    addRowHighlighting();
    addColumnHighlighting();
  
    $(document).on('keydown', onKeyboardInput);
    showCursor();
  }
  
  function onKeyboardInput(event) {
    if ($editorCell == null) { return true; }
  
    if (!event) var event = window.event;
    var keyValue = event.keyCode;
    if( keyValue == null ) { return true; }
  
    // Accept DEL, RETURN, TAB, arrows, and letters.
    if (keyValue >= 65 && keyValue <= 90) { 
      if ($horizontalMode) {
        setCharacterHorizontal(String.fromCharCode(keyValue));
      } else {
        setCharacterVertical(String.fromCharCode(keyValue));
      }
    } else if (keyValue == 8) {
      if ($horizontalMode) {
        clearCharacterHorizontal();   // <BACKSPACE> unsets a character
      } else {
        clearCharacterVertical();   // <BACKSPACE> unsets a character
      }
    } else if (keyValue == 999) {
      // <SPACE> marks a tripling multiplier TODO
    } else if (keyValue == 9 ) {
      toggleDirectionMode(); // <TAB> toggles horiz/vert direction modes
    } else if (keyValue == 8 || keyValue == 13 ) {
      closeWordEditor();  // <ESC> or <RETURN> to stop editting
    } else if (keyValue = 37 && $horizontalMode ) {
      moveCursorLeft();   // <LEFT> moves the cursor left
    } else if (keyValue = 38 && !$horizonalMode ) {
      moveCursorAbove();   // <UP> moves the cursor up
    } else if (keyValue = 39 && $horizontalMode ) {
      moveCursorRight();  // <RIGHT> moves the cursor right
    } else if (keyValue = 40 && !$horizontalMode ) {
      moveCursorBelow();  // <DOWN> moves the cursor down
    }
  
    return true;
  }
  
  function showContextMenu(event) {
    return false;
  }
  
  //
  // Keystroke handlers
  //

  function toggleDirectionMode() {
    if( $horizontalMode ) {
      $rootTable.removeClass('xw-horizontal').addClass('xw-vertical');
      $horizontalMode = false;

      $mainStrategy = $verticalStrategy;
      $altStrategy  = $horizontalStrategy;
    } else {
      $rootTable.removeClass('xw-vertical').addClass('xw-horizontal');
      $horizontalMode = true;

      $mainStrategy = $horizontalStrategy;
      $altStrategy  = $verticalStrategy;
    }
  }
  
  //
  // Orientation-agnostic navigation interface.
  // -- Exposes orientation-dependent properties (e.g. Left/Right/Above/Below)
  //    through an orientation-agnostic dialect (e.g. Head/Tail Main/Alt,
  //    Next/Prev) with $orientationMode gating which behavior to implement.
  //

  var $horizontalStrategy = {
    unit: '.xw-htop .xw-hend',          mid: '.xw-hmid',
    head: '.xw-htop',                  tail: '.xw-hend',
    altUnit: '.xw-vtop .xw-vend',    altMid: '.xw-vmid',
    altHead: '.xw-vtop',            altTail: '.xw-vend',

    nextCell: function(fromCell) {
      return fromCell.toRight;
    },
    prevCell: function(fromCell) {
      return fromCell.toLeft;
    },
    isHead: function(checkCell) {
      return $(checkCell).hasClass('xw-htop');
    },
    isTail: function(checkCell) {
      return $(checkCell).hasClass('xw-hend');
    }
  };
  var $verticalStrategy = {
    unit: '.xw-htop .xw-hend',          mid: '.xw-hmid',
    head: '.xw-htop',                  tail: '.xw-hend',
    altUnit: '.xw-vtop .xw-vend',    altMid: '.xw-vmid',
    altHead: '.xw-vtop',            altTail: '.xw-vend',

    nextCell: function(fromCell) {
      return fromCell.toBelow;
    },
    prevCell: function(fromCell) {
      return fromCell.toAbove;
    },
    isHead: function(checkCell) {
      return $(checkCell).hasClass('xw-vtop');
    },
    isTail: function(checkCell) {
      return $(checkCell).hasClass('xw-vent');
    }
  };
    
  var $mainStrategy = $horizontalStrategy;
  var $altStrategy  = $verticalStrategy;

  function mainNextCell(ofCell) { $mainStrategy.nextCell(ofCell); }
  function altNextCell(ofCell) { $altStrategy.nextCell(ofCell); }

  function mainPrevCell(ofCell) { $mainStrategy.prevCell(ofCell); }
  function altPrevCell(ofCell) { $altStrategy.prevCell(ofCell); }

  function mainIsHead(ofCell) { $mainStrategy.isHead(ofCell); }
  function altIsHead(ofCell) { $altStrategy.isHead(ofCell); }

  function mainIsPrev(ofCell) { $mainStrategy.isPrev(ofCell); }
  function altIsPrev(ofCell) { $altStrategy.isPrev(ofCell); }

  //
  // Word navigation helpers
  // -- Includes helpers for "If Not Null And Check X" comparisons
  //

  function mainWord(ofCell) {
    var retVal = $(ofCell);
    var currentCell = mainNextCell(ofCell);
    while (isFilled(currentCell)) {
      retVal = retVal.add(currentCell)
      currentCell = mainNextCell(currentCell);
    }

    currentCell = mainPrevCell(ofCell);
    while (isFilled(currentCell)) {
      retVal = retVal.add(currentCell)
      currentCell = mainPrevCell(currentCell);
    }

    return retVal;
  }

  function altWord(ofCell) {
    var retVal = $(ofCell);
    var currentCell = altNextCell(ofCell);
    while (isFilled(currentCell)) {
      retVal = retVal.add(currentCell)
      currentCell = altNextCell(currentCell);
    }
    currentCell = altPrevCell(ofCell);

    while (isFilled(currentCell)) {
      retVal = retVal.add(currentCell)
      currentCell = altPrevCell(currentCell);
    }

    return retVal;
  }

  // Finds the end of a word of the current orientation mode from the given
  // parameter cell.  It is the callers responsibility that the argument cell
  // is part of a word--no error checking is provided.
  function mainWordEnd(fromCell) {
    var nextCell = getNext(fromCell);
    while (isFilled(nextCell) && !isTail(nextCell)) {
      nextCell = getNext(nextCell);
    }
    return nextCell;
  }

  // isBlank() and isFilled() each return false on null input.  Depending on
  // how null is expected to be handled, it may be favorible to negate the
  // result of the check opposite what is desired.
  //
  // e.g. (cell != null && isBlank(cell)) can be written more succintly as
  //      (! isFilled(cell)) without loss of correct null handling, whereas
  //      (isBlank(cell)) would cause bugs on null input.
  //
  // +=======+===========+============+
  // | INPUT | isBlank() | isFilled() |
  // +=======+===========+============+
  // | null  |   FALSE   |    FALSE   |
  // |  'c'  |   FALSE   |    TRUE    |
  // |  ''   |   TRUE    |    FALSE   |
  // +=======+===========+============+
  function isBlank(checkCell) {
    return ((checkCell != null) && (checkCell.content == ''));
  }

  function isFilled(checkCell) {
    return ((checkCell != null) && (checkCell.content != ''));
  }

  //
  // Cursor enable/disable methods
  //

  function showCursor() {
    $('img.xw-value', $($editorCell)).attr('src', $valueImages.unk);
  }

  function hideCursor() {
    if (isBlank($editorCell)) {
      $('img.xw-value', $($editorCell)).attr('src', $valueImages.blank);
    } else {
      var content = this.content();
      $('img.xw-value', $($editorCell)).attr('src', $valueImages.attr($editorCell.content));
    }
  }

  //
  // Cursor movement methods
  //

  function moveCursorRight() {
    if ($($editorCell).hasClass('xw-hend')) { return false; }

    _stepHorizontal($editorCell.toRight);
    return true;
  }

  function moveCursorBelow() {
    if ($($editorCell).hasClass('xw-vend')) { return false; }

    _stepVertical($editorCell.toBelow);
    return true;
  }

  function moveCursorLeft() {
    if ($($editorCell).hasClass('xw-htop')) { return false; }

    _stepHorizontal($editorCell.toLeft);
    return true;
  }

  function moveCursorBelow() {
    if ($($editorCell).hasClass('xw-vtop')) { return false; }

    _stepVertical($editorCell.toAbove);
    return true;
  }

  // Private methods for internal use only.
  // 
  // "Stepping" moves the cursor without changing the fill space to
  // a cell that is given as a parameter.  It is the caller's 
  // responsibility to ensure that parameter value is within the 
  // active word's fill region.
  //
  // "Extending" and "Shrinking" are used to describe movement that
  // also requires changing the active word region's fill space.
  // Neither requires a parameter because both kinds of movement can
  // only occur at the end of the present fill region.
  // "Extending" increases the fill region by one cell.
  // "Shrinking" decreases the fill region by one cell.
  //
  // "Backfilling" and "Collapsing" describe extension and reduction
  // by moving the start-of-word marker, respectively.
  function _stepHorizontal(nextCell) {
    hideCursor();
    dropColumnHighlighting();
    $editorCell = nextCell;
    addColumnHighlighting();
    showCursor();
  }

  function _stepVertical(nextCell) {
    hideCursor();
    dropRowHighlighting();
    $editorCell = nextCell;
    addRowHighlighting();
    showCursor();
  };

  function _extendHorizontal(fromEnd) {
    if ($(fromEnd).hasClass('xw-htop')) {
      $(fromEnd).removeClass('xw-hend');
    } else {
      $(fromEnd).removeClass('xw-hend').addClass('xw-hmid');
    }
    
    var nextCell = fromEnd.toRight;
    while (! isBlank(nextCell)) {
      nextCell.removeClass('xw-samerow').addClass('xw-hmid');
      nextCell = nextCell.toRight;
    }
    nextCell.removeClass('xw-samerow').addClass('xw-hend');
  }

  function _extendVertical(fromEnd) {
    if ($(fromEnd).hasClass('xw-vtop')) {
      $(fromEnd).removeClass('xw-vend');
    } else {
      $(fromEnd).removeClass('xw-vend').addClass('xw-vmid');
    }
    
    var nextCell = fromEnd.toBelow;
    while (! isBlank(nextCell)) {
      nextCell.removeClass('xw-samecol').addClass('xw-vmid');
      nextCell = nextCell.toBelow;
    }
    nextCell.removeClass('xw-samecol').addClass('xw-vend');
  }

  function _shrinkHorizontal(fromEnd) {
    $(fromEnd).removeClass('xw-hend').addClass('xw-samerow');
    fromEnd.$(toLeft).removeClass('xw-hmid').addClass('xw-hend');
  }

  function _shrinkVertical(fromEnd) {
    $(fromEnd).removeClass('xw-vend').addClass('xw-samecol');
    fromEnd.$(toAbove).removeClass('xw-vmid').addClass('xw-vend');
  }

  function _backfillHorizontal(fromTop) {
    if ($(fromTop).hasClass('xw-hend')) {
      $(fromTop).removeClass('xw-htop');
    } else {
      $(fromTop).removeClass('xw-htop').addClass('xw-hmid');
    }
    
    var nextCell = fromTop.toRight;
    while (! isBlank(nextCell)) {
      nextCell.removeClass('xw-samerow').addClass('xw-hmid');
      nextCell = nextCell.toRight;
    }
    nextCell.removeClass('xw-samerow').addClass('xw-htop');
  }

  function _backfillVertical(fromTop) {
    if ($(fromTop).hasClass('xw-vend')) {
      $(fromTop).removeClass('xw-vtop');
    } else {
      $(fromTop).removeClass('xw-vtop').addClass('xw-vmid');
    }
    
    var nextCell = fromTop.toBelow;
    while (! isBlank(nextCell)) {
      nextCell.removeClass('xw-samecol').addClass('xw-vmid');
      nextCell = nextCell.toBelow;
    }
    nextCell.removeClass('xw-samecol').addClass('xw-vtop');
  }

  function _collapseHorizontal(fromTop) {
    $(fromTop).removeClass('xw-htop').addClass('xw-samerow');
    fromEnd.$(toRight).removeClass('xw-hmid').addClass('xw-htop');
  }

  function _collapseVertical(fromTop) {
    $(fromEnd).removeClass('xw-vtop').addClass('xw-samecol');
    fromEnd.$(toRight).removeClass('xw-vmid').addClass('xw-vtop');
  }

//
// Content manipulation -- setCharacter() and clearCharacter()
//

  function setCharacterHorizontal(c) {
    // Relocate the borders of any vertical words adjacent to the changed
    // cell if it was previously blank.
    if (isBlank($editorCell)) {
      if (($editorCell.toAbove != null) &&
          ($editorCell.$(toAbove).hasClass('xw-vend'))) {
        _extendVertical($editorCell.toAbove);
      } else if (($editorCell.toBelow != null) &&
                 ($editorCell.$(toBelow).hasClass('xw-vtop'))) {
        _backfillVertical($editorCell.toBelow);
      }
    }

    // Perform the assignment.
    var nextCell = $editorCell.toRight;
    $editorCell.content = c;
    
    // Mid-word edits are easy--no expansion to consider, just advance the 
    // cursor within the active word region as tho' <RIGHT ARROW> were struck.
    if (!$editorCell.hasClass('xw-hend')) { _stepHorizontal(nextCell); return; }

    // Check conditions that block expansion.  If any of these hold, leave
    // the cursor where it is.
    // -- Reaching a border (there is no next cell to expand into)
    // -- Closing a gap that would join two other words
    // -- Populating all four cells of a 2x2 group
    if (nextCell == null) { return; }
    if ((nextCell.toAbove != null) && (nextCell.toBelow != null) &&
        (nextCell.$(toAbove).hasClass('xw-vend')) &&
        (nextCell.$(toBelow).hasClass('xw-vtop'))) {
      return;   // Would join two vertical words
    }
    if ((nextCell.toRight != null) &&
        (nextCell.$(toRight).hasClass('xw-htop'))) {
      return;  // Would join active word to another adjacent to next cell.
    }
    if (($editorCell.toBelow != null) && (nextCell.toBelow != null) &&
        (!isBlank($editorCell.toBelow)) &&
        (!isBlank(nextCell.toBelow))) { return; }
    if (($editorCell.toAbove != null) && (nextCell.toAbove != null) &&
        (!isBlank($editorCell.toAbove)) &&
        (!isBlank(nextCell.toAbove))) { return; }

    // If we reach this point, expand the edit region and step the cursor.
    _expandHorizontal($editorCell);
    _stepHorizontal($editorCell);
  }

  function setCharacterVertical(c) {
    // Relocate the borders of any vertical words adjacent to the changed
    // cell if it was previously blank.
    if (isBlank($editorCell)) {
      if (($editorCell.toLeft != null) &&
          ($editorCell.$(toLeft).hasClass('xw-hend'))) {
        _extendHorizontal($editorCell.toLeft);
      } else if (($editorCell.toRight != null) &&
                 ($editorCell.$(toRight).hasClass('xw-htop'))) {
        _backfillHorizontal($editorCell.toRight);
      }
    }

    // Perform the assignment.
    var nextCell = $editorCell.toBelow;
    $editorCell.content = c;
    
    // Mid-word edits are easy--no expansion to consider, just advance the 
    // cursor within the active word region as tho' <RIGHT ARROW> were struck.
    if (!$editorCell.hasClass('xw-vend')) { _stepVertical(nextCell); return; }

    // Check conditions that block expansion.  If any of these hold, leave
    // the cursor where it is.
    // -- Reaching a border (there is no next cell to expand into)
    // -- Closing a gap that would join two other words
    // -- Populating all four cells of a 2x2 group
    if (nextCell == null) { return; }
    if ((nextCell.toLeft != null) && (nextCell.toRight != null) &&
        (nextCell.$(toLeft).hasClass('xw-hend')) &&
        (nextCell.$(toRight).hasClass('xw-htop'))) {
      return;   // Would join two vertical words
    }
    if ((nextCell.toBelow != null) &&
        (nextCell.$(toBelow).hasClass('xw-vtop'))) {
      return;  // Would join active word to another adjacent to next cell.
    }
    if (($editorCell.toRight != null) && (nextCell.toRight != null) &&
        (!isBlank($editorCell.toRight)) &&
        (!isBlank(nextCell.toRight))) { return; }
    if (($editorCell.toLeft != null) && (nextCell.toLeft != null) &&
        (!isBlank($editorCell.toLeft)) &&
        (!isBlank(nextCell.toLeft))) { return; }

    // If we reach this point, expand the edit region and step the cursor.
    _expandVertical($editorCell);
    _stepVertical($editorCell);
  }

  function clearCharacterHorizontal() {
    // Backspace removes a character left of the current cell and therefore
    // does not apply to the top cell of a word.
    if ($($editorCell).hasClass('xw-htop')) {
      return showBackspaceAtWordTopError($editorCell);
    }
  
    // Check whether any vertical words will split or be truncated by this
    // action and prevent any word from being reduced to a single cell.
    // Words may not be split in two since the editor is not allowed to
    // glue them back together afterwards.
    var pruneCell  = mainWordEnd($editorCell);
    if (isFilled(pruneCell.toAbove)) {
      if ((pruneCell.$(toAbove).hasClass('xw-vtop')) ||
          (pruneCell.toAbove.$(toAbove).hasClass('xw-vtop'))) {
        return showShortTruncateError(pruneCell);
      } else if (! $(pruneCell).hasClass('xw-vend')) {
        return showIllegalSplitError(pruneCell);
      }
  
      _shrinkVertical(pruneCell);
    } else if (isFilled(pruneCell.toRight)) {
      if ((pruneCell.$(toBelow).hasClass('xw-vend')) ||
          (pruneCell.toBelow.$(toBelow).hasClass('xw-vend'))) {
        return showShortTruncateError(pruneCell);
      } else if (! $(pruneCell).hasClass('xw-vtop')) {
        return showIllegalSplitError(pruneCell);
      }

      _collapseVertical(pruneCell);
    }
    
    // The edit is approved.  Shift all content down by one cell, then shrink
    // the active region by one.
    var thisCell = $editorCell.toLeft;
    var thisImg  = $('img.xw-value', $(thisCell));
    var nextCell = $editorCell;
    var nextImg  = null;
    while (thisCell != pruneCell) {
      thisCell.content = nextCell.content;
  
      nextImg  = $('img.xw-value', $(nextCell));
      thisImg.attr('src', nextImg.attr('src'));
      
      thisCell = nextCell;
      thisImg  = nextImg;
      nextCell = thisCell.toRight;
    }
  
    _shrinkHorizontal(pruneCell);
  }

  function clearCharacterVertical() {
    // Backspace removes a character left of the current cell and therefore
    // does not apply to the top cell of a word.
    if ($($editorCell).hasClass('xw-vtop')) {
      return showBackspaceAtWordTopError($editorCell);
    }
  
    // Check whether any vertical words will split or be truncated by this
    // action and prevent any word from being reduced to a single cell.
    // Words may not be split in two since the editor is not allowed to
    // glue them back together afterwards.
    var pruneCell  = mainWordEnd($editorCell);
    if (isFilled(pruneCell.toLeft)) {
      if ((pruneCell.$(toLeft).hasClass('xw-htop')) ||
          (pruneCell.toLeft.$(toLeft).hasClass('xw-htop'))) {
        return showShortTruncateError(pruneCell);
      } else if (! $(pruneCell).hasClass('xw-hend')) {
        return showIllegalSplitError(pruneCell);
      }
  
      _shrinkHorizontal(pruneCell);
    } else if (isFilled(pruneCell.toRight)) {
      if ((pruneCell.$(toRight).hasClass('xw-hend')) ||
          (pruneCell.toRight.$(toRight).hasClass('xw-hend'))) {
        return showShortTruncateError(pruneCell);
      } else if (! $(pruneCell).hasClass('xw-htop')) {
        return showIllegalSplitError(pruneCell);
      }
  
      _collapseHorizontal(pruneCell);
    }
    
    // The edit is approved.  Shift all content down by one cell, then shrink
    // the active region by one.
    var thisCell = $editorCell.toAbove;
    var thisImg  = $('img.xw-value', $(thisCell));
    var nextCell = $editorCell;
    var nextImg  = null;
    while (thisCell != pruneCell) {
      thisCell.content = nextCell.content;
  
      nextImg  = $('img.xw-value', $(nextCell));
      thisImg.attr('src', nextImg.attr('src'));
      
      thisCell = nextCell;
      thisImg  = nextImg;
      nextCell = thisCell.toBelow;
    }
  
    _shrinkVertical(pruneCell);
  }

  //
  // Active/Inactive/Same(Row|Col) Highlight Manipulation
  //

  function addRowHighlighting() {
    var wordCells = mainWord($editorCell);

    $editorCell.sameRow.not(wordCells).addClass('xw-samerow');
    wordCells.addClass('xw-selected');
  }

  function dropRowHighlighting() {
    $editorCell.sameRow.removeClass('xw-selected xw-samerow');
  }

  function addColumnHighlighting() {
    // TODO: Fix the bug below by switching to a Main/Alt signature type.
    var wordCells = altWord($editorCell);

    $editorCell.sameCol.not(wordCells).addClass('xw-samecol');
    wordCells.addClass('xw-selected');
  }

  function dropColumnHighlighting() {
    $editorCell.sameCol.removeClass('xw-selected xw-samecol');
  }

  function closeWordEditor() {
    $(document).off('keydown', onKeyboardInput);

    // Remove any trailing blank space and then check for minimum word length.
    // Remove words that are too short with an error.
    var wordEnd = mainWordEnd($editorCell);
    if ($horizontalMode) {
      if (isBlank(wordEnd)) {
        _shrinkHorizontal(wordEnd);
      }

      if ($(wordEnd).hasClass('xw-htop')) {
        $(wordEnd).removeClass( 'xw-htop xw-hend' )
        wordEnd.content = '';

        $('img.xw-value', $(wordEnd)
        ).attr('src', $valueImages.blank);

        showShortWordError();
      } else if( wordEnd.$(toLeft).hasClass('xw-htop')) {
        $(wordEnd).removeClass('xw-hend');
        wordEnd.content = '';

        wordEnd.toLeft.content = '';
        wordEnd.$(toLeft).removeClass('xw-htop');

        $('img.xw-value', $(wordEnd).add(wordEnd.$(toLeft))
        ).attr('src', $valueImages.blank);

        showShortWordError();
      }
    } else {
      if (isBlank(wordEnd)) {
        _shrinkVertical(wordEnd);
      }

      if ($(wordEnd).hasClass('xw-vtop')) {
        $(wordEnd).removeClass('xw-vtop xw-vend');
        wordEnd.content = '';

        $('img.xw-value', $(wordEnd)
        ).attr('src', $valueImages.blank);

        showShortWordError();
      } else if (wordEnd.$(toAbove).hasClass('xw-vtop')) {
        $(wordEnd).removeClass('xw-vend');
        wordEnd.content = '';

        wordEnd.toAbove.content = '';
        wordEnd.$(toAbove).removeClass('xw-vtop');

        $('img.xw-value', $(wordEnd).add(wordEnd.$(toAbove))
        ).attr('src', $valueImages.blank);

        showShortWordError();
      }
    }
      
    dropRowHighlighting();
    dropColumnHighlighting();
    hideCursor();

    $editorCell = null;
  }

  //
  // Error Modal Displays
  //

  function showShortWordError() {
    alert('Pruning editor result because it is too short');

    return false;
  }

  function showMaxWordsError() { alert('Max Words'); return false; }

  function showHorizontalMergeError(mergeCell) {
    alert('Horizontal merge error at ({row},{col})'.format(mergeCell));

    return false; 
  }

  function showVerticalMergeError(mergeCell) {
    alert('Vertical merge error at ({row},{col})'.format(mergeCell));

    return false;
  }

  function showCongesionError(hPeer, vPeer) {
    alert( '2x2 congestion error at [ ({hrow},{vcol}); ({hrow},{hcol}); ({vrow},{vcol}); ({vrow},{hcol}) ]'.format({ hrow: hPeer.row, hcol: hPeer.col, vrow: vPeer.row, vcol: vPeer.col })
    );

    return false;
  }

  function showBackspaceAtWordTopError(pruneCell) {
    alert('Cannot backspace from word starting at ({row},{col})'.format(pruneCell));

    return false;
  }

  function showShortTruncateError(pruneCell) {
    alert('Cannot truncate intersecting word at ({row},{col})'.format(pruneCell));

    return false;
  }

  function showIllegalSplitError(pruneCell) {
    alert('Cannot split intersecting word at ({row},{col})'.format(pruneCell));

    return false;
  }

  initialize();
</script>
