<div class="row">
  <%= form_for(@crossword) do |f| %><div class="span5">
    <% if @crossword.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@crossword.errors.count, "error") %> prohibited this crossword from being saved:</h2>
        <ul>
        <% @crossword.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
    <% end %>
    <%= f.hidden_field :bonus_value %>
    <%= f.hidden_field :bonus_word %>
    <%= f.fields_for :word_items do |w| %>
      <%= w.hidden_field :text_value %><%= w.hidden_field :triple_letter_index %><%= w.hidden_field :x_coordinate %><%= w.hidden_field :y_coordinate %><%= w.hidden_field :is_horizontal %>
    <% end %>
    <%= f.submit %>
  </div>
  <div class="span7">
    <table id="cardroot" class="xw-sliced">
      <tr>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="10" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="42" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="34" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="22" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="112" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="84" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="28" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="24" height="1" border="0"></td>
        <td><img src="<%= path_to_image 'card/shim.gif' %>" width="1" height="1" border="0"></td>
      </tr>
      <tr valign="top">
        <td colspan="11"><img name="card_00" src="<%= path_to_image 'card/card_00.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="5" colspan="2"><img name="card_01" src="<%= path_to_image 'card/card_01.jpg' %>"></td>
        <td rowspan="3" colspan="3">
          <table id="reveal" class="xw-layered">
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="2"><img name="card_03" src="<%= path_to_image 'card/card_03.jpg' %>"></td>
        <td>
          <table id="bonusvalue" class="xw-sliced">
            <tr>
              <td><img src="<%= path_to_image 'fill/altPath.png' %>"></td>
              <td><img src="<%= path_to_image 'fill/pink2.png' %>"></td>
              <td><img src="<%= path_to_image 'fill/imageSrc.png' %>"></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="3"><img name="card_05" src="<%= path_to_image 'card/card_05.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td><img name="card_06" src="<%= path_to_image 'card/card_06.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="2"><img name="card_07" src="<%= path_to_image 'card/card_07.jpg' %>"></td>
        <td colspan="3">
          <table id="bonusword" class="xw-layered">
            <tr>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
              <td><div class="xw-cell"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>"></div></td>
            </tr>
          </table>
        </td>
        <td rowspan="2" colspan="2"><img name="card_09" src="<%= path_to_image 'card/card_09.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="3"><img name="card_10" src="<%= path_to_image 'card/card_10.jpg' %>"></td>
        <td colspan="3"><img name="card_11" src="<%= path_to_image 'card/card_11.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="2"><img name="card_12" src="<%= path_to_image 'card/card_12.jpg' %>"></td>
        <td rowspan="3" colspan="6"><table id="lettergrid" class="xw-layered">
              <% for ii in (0..10) do %>
              <tr>
                <td><div data-rowid="<%= ii %>" data-colid="0" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="1" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="2" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="3" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="4" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="5" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="6" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="7" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="8" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="9" data-content="" class="xw-cell">
                <td><div data-rowid="<%= ii %>" data-colid="10" data-content="" class="xw-cell">
              </tr>
              <% end %>
            </table></td>
        <td rowspan="4"><img name="card_14" src="<%= path_to_image 'card/card_14.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="3"><img name="card_15" src="<%= path_to_image 'card/card_15.jpg' %>"></td>
        <td colspan="2"><img name="card_16" src="<%= path_to_image 'card/card_16C.jpg' %>"></td>
        <td rowspan="3"><img name="card_17" src="<%= path_to_image 'card/card_17.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td rowspan="2" colspan="2"><img name="card_18" src="<%= path_to_image 'card/card_18.jpg' %>"></td>
      </tr>
      <tr valign="top">
        <td colspan="6"><img name="card_19" src="<%= path_to_image 'card/card_19.jpg' %>"></td>
      </tr>
    </table>
  <% end %></div>
</div>
<script type="text/javascript">
// TODO LIST:
// P1:
// -- Rudimentary Bonus, Tripling, Your Letter Fields
// -- Reading hidden form fields in during initialize for edit
// -- AJAX call to load different card state without page reload
// -- AJAX call to wait on payout stats update on save
// -- AJAX call to save and update payout stats on edit
// P2:
// -- Bonus word UI
// -- Your Letters UI
// -- Tripling Modifier UI
// P3:
// -- Check for cell clicks that cannot grow out to 3 characters
// -- Check for direction toggle capability on cursor movement
// -- Bootstrap dialogs
// -- Cursor blinking
  var $editorCell = null;
  var $hasAltDir = true;
  var $wordCount = 0;

  var $wordRange = null;
  var $openRange = null;

  var $horizontalCells = [];
  var $verticalCells = [];
  var $physicalGrid = $horizontalCells;

  var $horizontalRows = [];
  var $verticalRows = [];
  var $logicalGrid = $horizontalRows;
  var $altLogicalGrid = $verticalRows;

  var $rootTable  = $('#lettergrid');
  
  var $blankImage = "<%= path_to_image 'val/blank.png' %>";
  var $cursorImage = "<%= path_to_image 'val/qm.png' %>";
  var $valueImages = $( {
    A: "<%= path_to_image 'val/A.png' %>", B: "<%= path_to_image 'val/B.png' %>",
    C: "<%= path_to_image 'val/C.png' %>", D: "<%= path_to_image 'val/D.png' %>",
    E: "<%= path_to_image 'val/E.png' %>", F: "<%= path_to_image 'val/F.png' %>",
    G: "<%= path_to_image 'val/G.png' %>", H: "<%= path_to_image 'val/H.png' %>",
    I: "<%= path_to_image 'val/I.png' %>", J: "<%= path_to_image 'val/J.png' %>",
    K: "<%= path_to_image 'val/K.png' %>", L: "<%= path_to_image 'val/L.png' %>",
    M: "<%= path_to_image 'val/M.png' %>", N: "<%= path_to_image 'val/N.png' %>",
    O: "<%= path_to_image 'val/O.png' %>", P: "<%= path_to_image 'val/P.png' %>",
    Q: "<%= path_to_image 'val/Q.png' %>", R: "<%= path_to_image 'val/R.png' %>",
    S: "<%= path_to_image 'val/S.png' %>", T: "<%= path_to_image 'val/T.png' %>",
    U: "<%= path_to_image 'val/U.png' %>", V: "<%= path_to_image 'val/V.png' %>",
    W: "<%= path_to_image 'val/W.png' %>", X: "<%= path_to_image 'val/X.png' %>",
    Y: "<%= path_to_image 'val/Y.png' %>", Z: "<%= path_to_image 'val/Z.png' %>"
  } );
    
  function initialize() {
    var contentTmpl = 
      '<img class="xw-value" src="<%= path_to_image 'val/blank.png'%>"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-border xw-htop" src="<%= path_to_image 'border/htop.png' %>" /><img class="xw-border xw-hmid" src="<%= path_to_image 'border/hmid.png' %>" /><img class="xw-border xw-hend" src="<%= path_to_image 'border/hend.png' %>" /><img class="xw-border xw-vtop" src="<%= path_to_image 'border/vtop.png' %>" /><img class="xw-border xw-vmid" src="<%= path_to_image 'border/vmid.png' %>" /><img class="xw-border xw-vend" src="<%= path_to_image 'border/vend.png' %>" /><img class="xw-fill xw-revealed" src="<%= path_to_image 'fill/brite1.png' %>" /><img class="xw-fill xw-selected" src="<%= path_to_image 'fill/selected1.png' %>" /><img class="xw-fill xw-mainpath" src="<%= path_to_image 'fill/imageSrc.png' %>" /><img class="xw-fill xw-altpath" src="<%= path_to_image 'fill/altPath2.png' %>" /><img class="xw-fill xw-initial" src="<%= path_to_image 'fill/pink2.png' %>" /></div></td>';
    var selectRowTmpl = 'div[data-rowid="{row}"]';
    var selectColTmpl = 'div[data-colid="{col}"]';

    // Iterate through the cells in document order, adding image data to
    // each cell and building a horizontal doubly linked lists connecting
    // immediate neighbors for horizontal navigability.
    for (var row=0; row<11; row++) {
      var lastHCell = null;
      var lastVCell = null;
      $horizontalCells[row] = [];
      $verticalCells[row]   = [];
      $horizontalRows[row]  = [];

      var thisRow   = $(selectRowTmpl.format( {row: row}, $rootTable ));
      thisRow.append(contentTmpl);

      thisRow.each(
        function(col, nextElement) { 
          var thisHCell = {
            row: row,
            col: col,
            selfNode: $(nextElement),
            sameRow: thisRow,
            sameCol: null,
            content: {
              current: '', previous: ''
            },
            hasTriple: {
              current: false, previous: false
            },
            open: {
              parallel: { head: 0, tail: 10, length: 11 },
              crossing: { head: 0, tail: 10, length: 11 }
            },
            word: {
              parallel: { head: row, tail: col, length: 1 },
              crossing: { head: col, tail: row, length: 1 }
            },
            toLeft: lastHCell,
            toRight: null,
            toAbove: null,
            toBelow: null
          };
          var thisVCell = {
            row: col,
            col: row,
            selfNode: thisHCell.selfNode,
            sameRow: null,
            sameCol: thisRow,
            content: thisHCell.content,
            hasTriple: thisHCell.hasTriple,
            open: {
              parallel: thisHCell.open.crossing,
              crossing: thisHCell.open.parallel
            },
            word: {
              parallel: thisHCell.word.crossing,
              crossing: thisHCell.word.parallel
            },
            toLeft: null,
            toRight: null,
            toAbove: thisHCell,
            toBelow: null
          };

          if(col != 0) {
            lastHCell.toRight = thisHCell;
            lastVCell.toBelow = thisVCell;
          }
  
          // Cell coordinates are inverted within the objects to support
          // dimension toggling, but the lookup arrays are not inverted
          // because they are accessed using the physical coordinates on
          // each cell's <dim> tag, which do not change when the edit
          // dimension is toggled.
          lastHCell = thisHCell;
          lastVCell = thisVCell;
          $horizontalCells[row][col] = thisHCell;
          $verticalCells[row][col] = thisVCell;

          // The "Rows" arrays are used for logical lookup when cleaning up
          // bookkeeping info using logical objects rather than selected
          // <div> objects.
          $horizontalRows[row][col] = thisHCell;
        }
      );
    }

    // Populate a second double linked list between cells in the same column
    // for vertical navigability, and add functions for use by the click and
    // keyboard event handlers that derive subsets of connected cells for word
    // boundary highlighting and cursor position management.
    for (var col=0; col<11; col++) {
      var lastHCell = null;
      var lastVCell = null;
      $verticalRows[col]   = [];

      var thisCol = $(selectColTmpl.format({col: col}, $rootTable));

      thisCol.each(
        function(row, nextCell) { 
          var thisHCell = $horizontalCells[row][col];
          var thisVCell = $verticalCells[row][col];

          thisHCell.sameCol = thisCol;
          thisVCell.sameRow = thisCol;
  
          thisHCell.toAbove = lastHCell;
          thisVCell.toLeft  = lastVCell;
  
          if(row != 0) {
            lastHCell.toBelow = thisHCell;
            lastVCell.toRight = thisVCell;
          }
  
          lastHCell = thisHCell;
          lastVCell = thisVCell;
          $verticalRows[col][row] = thisVCell;
        }
      );
    } // Latter of two intialization "for" loops.

    // Set a handler for the table, setup to recieve calls from 
    $rootTable.on('click', 'div.xw-cell', onClickCell);
  }

  //
  // Javascript Event Handlers
  //

  function onClickCell(event) {
    // If another word is already active accept its changes and release its
    // interests in the cell grid's decoration state.
    if ($editorCell != null) { closeWordEditor(); }
  
    var wrap = $(this); // $(event.target).parent();
    var row = wrap.data('rowid');
    var col = wrap.data('colid');
    var cellState = $physicalGrid[row][col];
  
    // If all 22 words are accounted for, disallow selections that are not 
    // contiguous with an existing word.
    // if (isBlank(cellState) && ($wordCount >= 22)) {
    //   showMaxWordsError();
    //   return false;
    // }

    if(cellState.open.parallel.length < 3) {
      if(cellState.open.crossing.length < 3) {
        showLockedOutCellError(cellState);
        return false;
      }

      toggleDirectionMode();

      $hasAltDir  = false;
      $editorCell = $physicalGrid[row][col];
    } else {
      if(cellState.open.crossing.length < 3) {
        $hasAltDir  = false;
      } else {
        $hasAltDir  = true;
      }
      $editorCell = cellState;
    }

    $openRange = $editorCell.open.parallel;
    $wordRange =
      bootstrapWordRange(
        $editorCell, $editorCell.word.parallel,
        $editorCell.toLeft, $editorCell.toLeft.word.parallel,
        $editorCell.toRight, $editorCell.toRight.word.parallel
      );

    $(document).on('keydown', onKeyboardInput);
    addEditorDecorations();
    showCursor();
  }
  
  function onKeyboardInput(event) {
    if ($editorCell == null) { return true; }
  
    if (!event) var event = window.event;

    var keyValue = event.keyCode;
    if( keyValue == null ) { return true; }
  
    // Accept DEL, RETURN, TAB, arrows, and letters.
    if (keyValue >= 65 && keyValue <= 90) { 
      setCharacter(String.fromCharCode(keyValue));
    } else if (keyValue == 8) {
      clearCharacter();   // <BACKSPACE> unsets a character
    } else if (keyValue == 999) {
      // <SPACE> marks a tripling multiplier TODO
    } else if (keyValue == 9) {
      if ($hasAltDir) { 
        commitActiveChanges();
        toggleDirectionMode();   // <TAB> toggles horiz/vert direction modes
      } else {                   // and accepts changes. (TODO only accept 
        // showBadToggleError(); // changes after the first change in a toggled
      }                          // direction).
    } else if (keyValue == 13) {
      // TODO:
      // abortWordEditor();  // <ESC> stops editting and rolls back changes
    } else if (keyValue == 27 ) {
      closeWordEditor();  // <RETURN> stops editting and accepts changes
    } else if (keyValue = 37) {
      moveCursorLeft();   // <LEFT> moves the cursor left
    } else if (keyValue = 38) {
      moveCursorLeft();   // <UP> moves the cursor up
    } else if (keyValue = 39) {
      moveCursorRight();  // <RIGHT> moves the cursor right
    } else if (keyValue = 40) {
      moveCursorRight();  // <DOWN> moves the cursor down
    }
  
    return true;
  }
  
  function showContextMenu(event) {
    return false;
  }
  
  //
  // Change-of-context cleanup methods
  // 

  function bootstrapWordRange(midCell, midWord, leftCell, leftWord, rightCell, rightWord) {

    if (isFilled(midCell)) {
      // Intentionally empty.  The result is the same as if it is not filled
      // and neither as left nor right.  Use this case to short circuit out
      // to the post-conditional branch block.
    } else if (isFilled(leftCell)) {
      return({
        current: {
          head:   leftWord.head,
          tail:   midWord.tail,
          length: leftWord.length + 1
        },
        previous: leftWord
      });
    } else if(isFilled(rightCell)) {
      return({
        current: {
          head:   midWord.head,
          tail:   rightWord.tail,
          length: rightWord.length + 1
        },
        previous: rightWord
      });
    }

    return({
      current: {
        head:   midWord.head,
        tail:   midWord.tail,
        length: midWord.length
      },
      previous: midWord
    });
  }

  function closeWordEditor() {
    $(document).off('keydown', onKeyboardInput);

    commitActiveChanges();

    hideCursor();
    removeEditorDecorations();

    $editorCell = null;
  }

  function commitActiveChanges() {
    // var open = cells.slice(openRange.openHead, openRange.openTail);
    var row = $editorCell.row;
    var wrc = $wordRange.current;
    var wrp = $wordRange.previous;

    // Apply changes to cells in the open range first.
    var first;
    if( wrc.head < wrp.head ) { first = wrc.head; } else { first = wrp.head; }

    var last;
    if( wrc.tail > wrp.tail ) { last = wrc.tail; } else { last = wrp.tail; }

    for( var ii=first; ii<=last; ii++ ) {
      var currentCell = $logicalGrid[row][ii];

      if( ii >= wrc.head && ii <= wrc.tail ) {
        currentCell.word.head = $wordRange.current.head;
        currentCell.word.tail = $wordRange.current.tail;
        currentCell.word.length = $wordRange.current.length;
      } else {
        currentCell.word.head = currentCell.col;
        currentCell.word.tail = currentCell.col;
        currentCell.word.length = 1;
      }

      currentCell.content.previous = currentCell.content.current;
      currentCell.hasTriple.previous = currentCell.hasTriple.current;
    }
    
    // Re-evaluate the open ranges of logical rows above and below
    // only if there were any changes that could affect them.  If the
    // head or tail moved and the length did not remain unity, the changes
    // have an impact.
    if ((wrc.head != wrp.head || wrc.tail != wrp.tail) &&
        (wrc.length != 1 || wrp.length != 1)) {
      if(row > 0) { checkOpenRanges(row - 1, $logicalGrid); }
      checkOpenRanges(row, $logicalGrid);
      if(row < 10) { checkOpenRanges(row + 1, $logicalGrid); }

      if(first > 0) { checkOpenRanges(first - 1, $altLogicalGrid); }
      for( var ii=first; ii<=last; ii++ ) {
        checkOpenRanges(ii, $altLogicalGrid);
      }
      if(last < 10) { checkOpenRanges(last + 1, $altLogicalGrid); }
    }
  }


  function checkOpenRanges(idx, orientation) {
    var openStart = 0;

    // Check down the row.  If a cell is populated, it must be in an unlocked
    // space by definition.  If a cell is blank, check its corner adjacencies,
    // and if none are full, it is unlocked.
    //
    // When a locked cell is found, openStart has the index of the first 
    // preceding unlocked cell.  Set every cell between it and the present with
    // the open region bounds discovered, then increment openStart and keep 
    // on searching.
    for( var ii=0; ii<11; ii++ ) {
      var thisCell = orientation[idx][ii];
      if (! isFilled(thisCell)) {
        if (((isFilled(thisCell.toAbove)) &&
             ((isFilled(thisCell.toRight)) &&
              (isFilled(thisCell.toRight.toAbove))) ||
             ((isFilled(thisCell.toLeft)) &&
              (isFilled(thisCell.toLeft.toAbove)))) ||
            ((isFilled(thisCell.toBelow)) &&
             ((isFilled(thisCell.toRight)) &&
              (isFilled(thisCell.toRight.toBelow))) ||
             ((isFilled(thisCell.toLeft)) &&
              (isFilled(thisCell.toLeft.toBelow))))) {
              // Illegal 2x2 if this cell is used.  Its locked.
              markOpenRange(idx, openStart, ii - 1, orientation);
              markOpenUnit(thisCell);
              openStart = ii+1;
        }
      }
    }
  }

  function markOpenUnit(cell) {
    cell.open.head = cell.open.tail = cell.col;
    cell.open.length = 1;
  }

  function markOpenRange(idx, head, tail, orientation) {
    var regionCell;
    var rangeLen = tail - head + 1;
    for( var ii=head; ii<=tail; ii++ ) {
      regionCell = orientation[idx][ii];
      regionCell.open.head = head;
      regionCell.open.tail = tail;
      regionCell.open.length = rangeLen;
    }
  }

  //
  // Orientation-aware cell decoration.  Not a public interface
  //

  var $horizontalStrategy = {
    toggleDirectionMode: function() {
      $dirModeStrategy = $verticalStrategy;
      $physicalGrid = $verticalCells;
      $altLogicalGrid = $logicalGrid;
      $logicalGrid = $verticalRows;
      
      if($editorCell != null) {
        $editorCell = $physicalGrid[$editorCell.row][$editorCell.col];
      }
    },

    decorateParallel: function(open, word) {
      open.addClass('xw-open xw-asrow');
      word.addClass('xw-word xw-asrow');
    },

    decorateCrossing: function(open, word) {
      open.not($editorCell.selfNode).addClass('xw-tabopen xw-astabcol');
      word.not($editorCell.selfNode).addClass('xw-tabword xw-astabcol');
    }
  };

  var $verticalStrategy = {
    toggleDirectionMode: function() {
      $dirModeStrategy = $horizontalStrategy;
      $physicalGrid = $horizontalCells;
      $altLogicalGrid = $logicalGrid;
      $logicalGrid = $horizontalRows;

      if( $editorCell != null ) {
        $editorCell = $physicalGrid[$editorCell.col][$editorCell.row];
      }
    },

    decorateParallel: function(open, word) {
      open.addClass('xw-open xw-ascol');
      word.addClass('xw-word xw-ascol');
    },

    decorateCrossing: function(open, word) {
      open.not($editorCell.selfNode).addClass('xw-tabopen xw-astabrow');
      word.not($editorCell.selfNode).addClass('xw-tabword xw-astabrow');
    }
  };

  var $dirModeStrategy = $horizontalStrategy

  function toggleDirectionMode() {
    $dirModeStrategy.toggleDirectionMode();

    if ($editorCell != null) {
      $openRange = $editorCell.open.parallel;
      $wordRange = bootstrapWordRange(
        $editorCell, $editorCell.word.parallel,
        $editorCell.toLeft, $editorCell.toLeft.word.parallel,
        $editorCell.toRight, $editorCell.toRight.word.parallel
      );
    }
  }

  function removeEditorDecorations() {
    $('div.xw-cell', $rootTable).removeClass(
      'xw-openhead xw-opentail xw-midopen xw-open xw-wordhead xw-wordtail xw-midword xw-word xw-tabopenhead xw-tabopentail xw-midtabopen xw-tabopen xw-tabwordhead xw-tabwordtail xw-midtabword xw-tabword xw-asrow xw-ascol xw-astabrow xw-astabcol');
  }

  function addEditorDecorations() {
    decorateDimension(
      $editorCell.sameRow, $openRange, $wordRange.current,
      $dirModeStrategy.decorateParallel,
      'xw-openhead', 'xw-opentail', 'xw-midopen',
      'xw-wordhead', 'xw-wordtail', 'xw-midword'
    );

    if($hasAltDir) {
      var altWordRange = bootstrapWordRange(
        $editorCell, $editorCell.word.crossing,
        $editorCell.toAbove, $editorCell.toAbove.word.crossing,
        $editorCell.toBelow, $editorCell.toBelow.word.crossing
      );
      decorateDimension(
        $editorCell.sameCol, $openRange, altWordRange.current,
        $dirModeStrategy.decorateCrossing,
        'xw-tabopenhead', 'xw-tabopentail', 'xw-midtabopen',
        'xw-tabwordhead', 'xw-tabwordtail', 'xw-midtabword'
      );
    }
  }

  function decorateDimension(cells, openRange, wordRange, dimMethod, openhead, opentail, midopen, wordhead, wordtail, midword) {
    var open = cells.slice(openRange.head, openRange.tail + 1);
    var word = cells.slice(wordRange.head, wordRange.tail + 1);

    dimMethod(open, word);

    open.first().addClass(openhead);
    open.last().addClass(opentail);
    open.slice(1, openRange.length - 1).addClass(midopen);

    word.first().addClass(wordhead);
    word.last().addClass(wordtail);
    word.slice(1, wordRange.length - 1).addClass(midword);
  }
      
  function moveWordHead(fromCell, toCell) {
    if (isWordTail(toCell)) {
      fromCell.selfNode.removeClass('xw-wordhead');
      toCell.selfNode.addClass('xw-wordhead');
    } else {
      fromCell.selfNode.removeClass('xw-wordhead');
      toCell.selfNode.removeClass('xw-midword').addClass('xw-wordhead');
    }
  }

  function moveWordTail(fromCell, toCell) {
    if (isWordHead(toCell)) {
      fromCell.selfNode.removeClass('xw-wordtail');
      toCell.selfNode.addClass('xw-wordtail');
    } else {
      fromCell.selfNode.removeClass('xw-wordtail');
      toCell.selfNode.removeClass('xw-midword').addClass('xw-wordtail');
    }

    $wordRow.add(toCell);
  }

  function moveCursor(fromCell, toCell) {
    var cursorReplacement
    if (isBlank(fromCell)) {
      cursorReplacement = $blankImage
    } else {
      cursorReplacement = $valueImages.attr($editorCell.content.current);
    }
    $('img.xw-value', fromCell.selfNode).attr('src', cursorReplacement);

    fromCell.sameCol.removeClass(
      'xw-tabopenhead xw-tabopentail xw-midtabopen xw-tabopen xw-tabwordhead xw-tabwordtail xw-midtabword xw-tabword xw-astabrow xw-astabcol');

    if(toCell.open.crossing.length < 3) {
      $hasAltDir  = false;
    } else {
      $hasAltDir  = true;

      var altWordRange = bootstrapWordRange(
        $editorCell, $editorCell.word.crossing,
        $editorCell.toAbove, $editorCell.toAbove.word.crossing,
        $editorCell.toBelow, $editorCell.toBelow.word.crossing
      );
      decorateDimension(
        $editorCell.sameCol, $editorCell.open.crossing, altWordRange.current,
        $dirModeStrategy.decorateCrossing,
        'xw-tabopenhead', 'xw-tabopentail', 'xw-midtabopen',
        'xw-tabwordhead', 'xw-tabwordtail', 'xw-midtabword'
      );
    }

    $('img.xw-value', toCell.selfNode).attr('src', $cursorImage);
  }

  //
  // Content If Not Null Helpers
  //

  // isBlank() and isFilled() each return false on null input.  Depending on
  // how null is expected to be handled, it may be favorible to negate the
  // result of the check opposite what is desired.
  //
  // e.g. (cell != null && isBlank(cell)) can be written more succintly as
  //      (! isFilled(cell)) without loss of correct null handling, whereas
  //      (isBlank(cell)) would cause bugs on null input.
  //
  // +=======+===========+============+
  // | INPUT | isBlank() | isFilled() |
  // +=======+===========+============+
  // | null  |   FALSE   |    FALSE   |
  // |  'c'  |   FALSE   |    TRUE    |
  // |  ''   |   TRUE    |    FALSE   |
  // +=======+===========+============+
  function isBlank(cell) {
    return ((cell != null) && (cell.content.current == ''));
  }

  function isFilled(cell) {
    return ((cell != null) && (cell.content.current != ''));
  }

  function isOpen(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-open')));
  }

  function isOpenHead(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-openhead')));
  }

  function isOpenTail(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-opentail')));
  }

  function isWord(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-word')));
  }

  function isWordHead(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-wordhead')));
  }

  function isWordTail(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-wordtail')));
  }

  function isTabOpen(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabopen')));
  }

  function isTabOpenHead(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabopenhead')));
  }

  function isTabOpenTail(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabopentail')));
  }

  function isTabWord(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabword')));
  }

  function isTabWordHead(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabwordhead')));
  }

  function isTabWordTail(cell) {
    return ((cell != null) && (cell.selfNode.hasClass('xw-tabwordtail')));
  }

  function getWordEnd() {
    var nextCell = $editorCell;

    while (! isWordTail(nextCell)) {
      nextCell = nextCell.toRight;
    }

    return nextCell;
  }

  //
  // Cursor management interface
  //

  function showCursor() {
    $('img.xw-value', $editorCell.selfNode).attr('src', $cursorImage);
  }

  function hideCursor() {
    var cursorReplacement;

    if (isBlank($editorCell)) {
      cursorReplacement = $blankImage
    } else {
      cursorReplacement = $valueImages.attr($editorCell.content.current);
    }

    $('img.xw-value', $editorCell.selfNode).attr('src', cursorReplacement);
  }

  function moveCursorRight() {
    if (isOpenTail($editorCell)) { return }

    var rightCell = $editorCell.toRight;

    if ((! isWord(rightCell)) &&
        ((! isWord($editorCell)) || isBlank($editorCell))) { return }

    if (isBlank($editorCell) && isWordHead($editorCell)) {
      moveCursor($editorCell, rightCell);
      moveWordHead($editorCell, rightCell);
    } else {
      moveCursor($editorCell, rightCell);
    }

    $editorCell = rightCell;
  }

  function moveCursorLeft() {
    if (isOpenHead($editorCell)) { return }

    var leftCell = $editorCell.toLeft;

    if ((! isWord(leftCell)) &&
        ((! isWord($editorCell)) || isBlank($editorCell))) { return }

    if (isBlank($editorCell) && isWordTail($editorCell)) {
      moveCursor($editorCell, leftCell);
      moveWordTail($editorCell, leftCell);
    } else {
      moveCursor($editorCell, leftCell);
    }

    $editorCell = leftCell;
  }

  //
  // Content manipulation -- setCharacter() and clearCharacter()
  //

  function setCharacter(c) {
    $editorCell.content.current = c;
    moveCursorRight();

    // Relocate the borders of any perpendicular words adjacent to the 
    // changed cell if it was previously blank.  Presume that this edit is
    // at extending a word on one side or the other, but not joining two 
    // words since the editor is supposed to prevent the cursor from even 
    // advancing into a space such that that was possible.
//    var tempCellOne = altPrevCell($editorCell);
//    if (altIsTail(tempCellOne)) {
//      altExtend(tempCellOne);
//    } else { 
//      tempCellOne = altNextCell($editorCell);
//
//      if (altIsHead(tempCellOne)) {
//        _backfillVertical(tempCellOne);
//      }
//    }
  }

  function clearCharacter() {
    // Backspace removes a character left of the current cell and therefore
    // does not apply to the top cell of a word.
    if (isWordHead($editorCell)) { return false; }
  
    // Shift all content down by one cell, then shrink the word region by one.
    var pruneCell = getWordEnd();
    var thisCell  = $editorCell.toLeft;
    var thisImg   = $('img.xw-value', thisCell.selfNode);
    var nextCell  = $editorCell;
    var nextImg   = null;
    while (thisCell != pruneCell) {
      thisCell.content.current = nextCell.content.current;
  
      nextImg  = $('img.xw-value', nextCell.selfNode);
      thisImg.attr('src', nextImg.attr('src'));
      
      thisCell = nextCell;
      thisImg  = nextImg;
      nextCell = thisCell.toRight;
    }
  
    moveWordTail(pruneCell, pruneCell.toLeft);
  }

  //
  // Active/Inactive/Same(Row|Col) Highlight Manipulation
  //

  //
  // Error Modal Displays
  //

  function showMaxWordsError() { alert('Max Words'); return false; }

  function findWords( ) {
    $words = [];
    
    for (var row=0; row<11; row++) {
      for (var col=0; col<11; col++) {
      }
    }
  }

  initialize();
</script>
