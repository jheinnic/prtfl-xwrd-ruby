<div class="row">
  <div class="span5"><%= form_for(@crossword) do |f| %>
    <% if @crossword.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(@crossword.errors.count, "error") %> prohibited this crossword from being saved:</h2>
        <ul>
        <% @crossword.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
    <% end %>
    <div class="field">
      <%= f.label :bonus_value %><br />
      <%= f.number_field :bonus_value %>
    </div>
    <div class="field">
      <%= f.label :bonus_word %><br />
      <%= f.text_field :bonus_word %>
    </div>
    <%= f.fields_for :word_items do |w| %>
      <%= w.hidden_field :text_value %><%= w.hidden_field :triple_letter_index %>
      <%= w.hidden_field :x_coordinate %><%= w.hidden_field :y_coordinate %><%= w.hidden_field :is_horizontal %>
    <% end %>
    <%= f.submit %>
  <% end %></div>
  <div class="span7"><table border="0" cellpadding="0" cellspacing="0" width="440" height="660">
    <tr valign="top">
        <td colspan="3"><img name="yellowcard_00" src="<%= path_to_image 'slice/yellow_card_00.jpg' %>" width="440" height="302" border="0"></td>
    </tr>
    <tr valign="top">
        <td rowspan="2"><img name="yellowcard_01" src="<%= path_to_image 'slice/yellow_card_01.jpg' %>" width="116" height="358" border="0"></td>
        <td><table id="lettergrid" class="xwt-grid" width="308" height="308" border="0" cellpadding="0" cellspacing="0">
          <% for ii in (0..10) do %>
          <tr>
            <td><div data-rowid="<%= ii %>" data-colid="0" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="1" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="2" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="3" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="4" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="5" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="6" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="7" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="8" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="9" data-content="" class="xw-cell xw-inactive">
            <td><div data-rowid="<%= ii %>" data-colid="10" data-content="" class="xw-cell xw-inactive">
          </tr>
          <% end %>
        </table></td>
        <td rowspan="2"><img name="yellowcard_03" src="<%= path_to_image 'slice/yellow_card_03.jpg' %>" width="16" height="358" border="0"></td>
    </tr>
    <tr valign="top">
        <td><img name="yellowcard_04" src="<%= path_to_image 'slice/yellow_card_04.jpg' %>" width="308" height="50" border="0"></td>
    </tr>
  </table></div>
</div>
<script type="text/javascript">
  var $editorCell = null;
  var $allCellRows = [];
  var $allCellCols = []
  var $horizontalMode = true;
  var $rootTable = $('#lettergrid');
  var $wordCount = 0;
  
  var $valueImages = $( {
    blank: "<%= path_to_image 'slice/blank.png' %>",
    unk: "<%= path_to_image 'val/qm.png' %>",
    A: "<%= path_to_image 'val/A.png' %>", B: "<%= path_to_image 'val/B.png' %>",
    C: "<%= path_to_image 'val/C.png' %>", D: "<%= path_to_image 'val/D.png' %>",
    E: "<%= path_to_image 'val/E.png' %>", F: "<%= path_to_image 'val/F.png' %>",
    G: "<%= path_to_image 'val/G.png' %>", H: "<%= path_to_image 'val/H.png' %>",
    I: "<%= path_to_image 'val/I.png' %>", J: "<%= path_to_image 'val/J.png' %>",
    K: "<%= path_to_image 'val/K.png' %>", L: "<%= path_to_image 'val/L.png' %>",
    M: "<%= path_to_image 'val/M.png' %>", N: "<%= path_to_image 'val/N.png' %>",
    O: "<%= path_to_image 'val/O.png' %>", P: "<%= path_to_image 'val/P.png' %>",
    Q: "<%= path_to_image 'val/Q.png' %>", R: "<%= path_to_image 'val/R.png' %>",
    S: "<%= path_to_image 'val/S.png' %>", T: "<%= path_to_image 'val/T.png' %>",
    U: "<%= path_to_image 'val/U.png' %>", V: "<%= path_to_image 'val/V.png' %>",
    W: "<%= path_to_image 'val/W.png' %>", X: "<%= path_to_image 'val/X.png' %>",
    Y: "<%= path_to_image 'val/Y.png' %>", Z: "<%= path_to_image 'val/Z.png' %>"
  } );
    
  function initialize() {
    var contentTmpl = 
      '<img class="xw-value" src="<%= path_to_image 'val/blank.png'%>"><img class="xw-grid" src="<%= path_to_image 'border/grid.png' %>"><img class="xw-border xw-unit" src="<%= path_to_image 'border/unit.png' %>" /><img class="xw-border xw-htop" src="<%= path_to_image 'border/htop.png' %>" /><img class="xw-border xw-hmid" src="<%= path_to_image 'border/hmid.png' %>" /><img class="xw-border xw-hend" src="<%= path_to_image 'border/hend.png' %>" /><img class="xw-border xw-vtop" src="<%= path_to_image 'border/vtop.png' %>" /><img class="xw-border xw-vmid" src="<%= path_to_image 'border/vmid.png' %>" /><img class="xw-border xw-vend" src="<%= path_to_image 'border/vend.png' %>" /><img class="xw-fill xw-dark" src="<%= path_to_image 'fill/pink2.png' %>" /><img class="xw-fill xw-light" src="<%= path_to_image 'fill/brite1.png' %>" /></div></td>';
    var selectRowTmpl = 'div[data-rowid="{row}"]';
    var selectColTmpl = 'div[data-colid="{col}"]';

    // Add navigability in the DOM for neighbors and upstream/downstream word
    // set identification:
    for (var row=0;row<11;row++) {
      $sameRow = $($selectRowTmpl.format( {row: row}, $rootTable );
      $allRows[row] = $sameRow;
      var $leftCell = null;

      $sameRow.append($contentTmpl);

      // 
      $sameRow.each(
        function( colIdx, nextCell ) { 
          if( leftCell != null ) {
            leftCell.toRight = nextCell;
            nextCell.toLeft = leftCell;
          }
          toLeft = nextCell;

          // Iterate through the cells in document order, adding image data to
          // each cell and building a horizontal doubly linked lists immediate
          // neighbors and empty collections for upstream/downstream words.
          this.nextCell.row = row;
          this.col = this.colIdx;
          this.domNode = $nextCell;
),
          this.toAbove = null;
          this.toBelow = null,
          this.wordLeft  = $();
          this.wordRight = $();
          this.wordAbove = $();
          this.wordBelow = $();


          // Augment the DOM node with methods for building, traversing,
          // validating, and extracting CrossWord Graph's consolidation 
          // contents.
          this.addClass = function(classStr) {
            this.domNode.addClass(classStr);
            return this;
          },
          this.removeClass: function(classStr) {
            this.domNode.removeClass(classStr);
            return this;
          };

          // If called with an argument, store it as an HTML5 data attribute
          // under a previously configured domain owner.  Otherwise, return
          // data from that location.
          this.content = function(s) { if( s === undefined ) { return this.domNode.data('content'); } else { return this.domNode.data('content', s); } };

          // Sweet, sweet, sugar.
          this.isBlank = function() { return this.domNode.data('content') == ''; };

          this.showCursor = function() {
            $('img.xw-value', this.domNode).attr('src', $valueImages.unk);
          };

          this.hideCursor = function() {
            if( this.isBlank() ) {
              $('img.xw-value', this.domNode).attr('src', $valueImages.blank);
            } else {
              var content = this.content();
              $('img.xw-value', this.domNode).attr('src', $valueImages.attr(content));
            }
          };

          this.advanceCursorRight function() {
            var nbrR = this.toRight;
            if( nbrR == null ) { return false; }

            if( !nbrR.isBlank() ) {
              this._moveCursorRight();
              return false;
            }

            var nbrRR = nbrR.toRight;
            if( nbrRR != null && !nbrRR.isBlank() ) { return false; }

            var bnkU = (this.toAbove != null) ? this.toAbove.isBlank() : true;
            var bnkD = (this.toBelow != null) ? this.toBelow.isBlank() : true;

            if(!bnkU) {
              if(!bnkD) { return false; }

              if(!this.toAbove.toRight.isBlank()) { return false; }
            } else {
              if(!this.toBelow.toRight.isBlank()) { return false; }
            }

            this._extendCursorRight();
          };


          this.advanceCursorDown = function() {
            if (this.wordBelow.size() > 0) {
              this._moveCursorBelow();
              return true;
            }

            if (this.toBelow == null) { return false; }

            if (this.toBelow.toBelow != null &&
               !this.toBelow.toBelow.isBlank()) {
              return false;
            }

            if (this.toLeft != null && !this.toLeft.isBlank() ) {
              if (this.toRight != null && !this.toRight.isBlank() ) {
                return false;
              }
              if(!this.toLeft.toBelow.isBlank()) {
                return false;
              }
            } else if (this.toRight != null && !this.toRight.isBlank() ) {
              if(!this.toRight.toBelow.isBlank()) {
                return false;
              }
            }

            this._extendCursorBelow();
            return true;
          },

          //
          // Private methods for internal use only.
          //
          // As used below, "Advancing" is the act of moving a cursor within a
          // file's pre-existing allocaed storage shortfall.  "Extending" is
          // similar insofar as it involves moving a cursor, but only in the
          // foreward direction and with a user's acknowledgement that the
          // necessity to allocate storage before moving the cursor exists.
          //
          // Finally, "Contracting" refers to a left/up-ward cursor movement
          // that permits returning the evacuated character as unused and
          // no longer reserved for the current word's use.
          _advanceCursorRight: function() {
            this.hideCursor();
            $editorCell = this.toRight;
            $sameRow    = $($selectRowTmpl.format(this), $rootTable);
            $sameCol    = $($selectColTmpl.format(this), $rootTable);
            $editorCell.showCursor();
          },

          _advanceCursorBelow: function() {
            this.hideCursor();
            $editorCell = this.toBelow;
            $sameRow    = $($selectRowTmpl.format(this), $rootTable);
            $sameCol    = $($selectColTmpl.format(this), $rootTable);
            $editorCell.showCursor();
          },

          _extendCursorRight: function() {
            this.hideCursor();
            $editorCell = this.toRight;
            $sameRow    = $($selectRowTmpl.format(this), $rootTable);
            $sameCol    = $($selectColTmpl.format(this), $rootTable);
            $editorCell.showCursor();
          },

          _extendCursorBelow: function() {
            this.hideCursor();
            $editorCell = this.toBelow;
            $sameRow    = $($selectRowTmpl.format(this), $rootTable);
            $sameCol    = $($selectColTmpl.format(this), $rootTable);
            $editorCell.showCursor();
          },
        }; <!-- DOM modifications in function parameter -->
      ); <!-- jQuery.each
    } <!-- First of two "For" loops.

    // Populate the vertical linked list for traversing columns over rows.
    for (var col=0;col<11;col+=1) {
      var $aboveCell = null;
      $sameCol = $($selectColTmpl.format( {col: col}, $rootTable );

      $sameCol.each(
        function( colIdx, nextCell ) { 
          if( aboveCell != null ) {
            nextCell.toAbove = aboveCell;
            toAbove.toBelow = cellState;
          }
          aboveCell = nextCell;

          if(aboveCell != null) {
            this.toAbove = cellAbove;
            cellAbove.toBelow = nextCell;
          }
        }
      );
    }

    $rootTable.on('click', 'div.xw-cell', onClickCell);
  }
  
  function onClickCell(event) {
    // If another word is already active, close it out.
    if( $editorCell != null ) { closeWordEditor(); }

    var wrap = $(this); // $(event.target).parent();
    var row = wrap.data('rowid');
    var col = wrap.data('colid');
    var cellState = getCellState(row, col);

    if (cellState.isBlank()) {
      if (isUnavailable(cellState)) {
        // If assigning a value would violate the 2x2 congestion rule, we
        // cannot allow the selection.
        showUnavailableDialog();
        return false;
      } else if( $wordCount >= 22 ) {
        // If no more words remain, we cannot allow the selection.
        showMaxWordsDialog();
        return false;
      }
    }
    
    $editorCell = cellState;

    $sameRow = $('div[data-rowid="' + row + '"]', $rootTable);
    $sameCol = $('div[data-colid="' + col + '"]', $rootTable);

    addRowHighlighting();
    addColumnHighlighting();

    $editorCell.showCursor();
    $(document).on('keydown', onKeyboardInput);
  }
  
  function onKeyboardInput(event) {
    if ($editorCell == null) { return true; }

    if (!event) var event = window.event;
    var keyValue = event.keyCode;
    if( keyValue == null ) { return true; }

    // Accept DEL, RETURN, TAB, arrows, and letters.
    if (keyValue >= 65 && keyValue <= 90) { 
      setCharacter( String.fromCharCode(keyValue) );
    } else if (keyValue == 8 ) {
      clearCharacter();   // <BACKSPACE> unsets a character
    } else if (keyValue == 999) {
      // <SPACE> marks a tripling multiplier TODO
    } else if (keyValue == 9 ) {
      toggleDirectionMode(); // <TAB> toggles horiz/vert direction modes
    } else if (keyValue == 8 || keyValue == 13 ) {
      closeWordEditor();  // <ESC> or <RETURN> to stop editting
    } else if (keyValue = 37 && $horizontalMode ) {
      moveCursorBack();   // <LEFT> moves the cursor left in horizontal mode
    } else if (keyValue = 38 && !$horizonalMode ) {
      moveCursorBack();   // <UP> moves the cursor up in vertical mode
    } else if (keyValue = 39 && $horizontalMode ) {
      moveCursorAhead();  // <RIGHT> moves the cursor right in horizontal mode
    } else if (keyValue = 40 && !$horizontalMode ) {
      moveCursorAhead();  // <DOWN> moves the cursor down in veritcal mode
    }
    
    return true;
  }
  
  function showContextMenu(event) {
    return false;
  }
  
  function getCellState(row, col) {
    return $cellStates[row*11 + col];
  }

  function toggleDirectionMode() {
    if( $horizontalMode ) {
      $rootTable.removeClass('xw-horizontal').addClass('xw-vertical');
      $horizontalMode = false;
    } else {
      $rootTable.removeClass('xw-vertical').addClass('xw-horizontal');
      $horizontalMode = true;
    }
  }

  function setCharacter(c) {
    // $editorCell.content.data('content', c)
    $editorCell.content(c);
    moveCursorAhead();
  }

  function clearCharacter() {
    // $editorCell.domNode.data('content', '')
    $editorCell.content('');
    moveCursorBack();
  }

  // Note: This method accounts directly for reducing end/mid tags when the
  //       word boundary contracts, but it indirectly delegates the active
  //       cell class tag swap to the column highlighting methods.  It would
  //       still be correct to apply the active tag here, but this approach
  //       is still correct and requires less code.
  function moveCursorBack() {
    if( $horizontalMode ) {
      if( $editorCell.wordLeft.size() > 0 ) {
        var cellLeft = $editorCell.toLeft
        dropColumnHighlighting();
        $editorCell.hideCursor();

        if( $editorCell.isBlank() && $editorCell.wordRight.size() == 0 ) {
          $editorCell.removeClass('xw-hend').addClass('xw-samerow');
          cellLeft.removeClass('xw-hmid').addClass('xw-hend');

          $editorCell.wordLeft.each(
            function(i, c) { c.wordRight = c.wordRight.not($editorCell.domNode); }
          );
          cellLeft.wordRight = $();
          $editorCell.wordLeft = $();
        }

        $editorCell = cellLeft;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        $editorCell.showCursor();
        addColumnHighlighting();
      }
    } else {
      if( $editorCell.wordAbove.size() > 0 ) {
        var cellAbove = $editorCell.toAbove
        dropRowHighlighting();
        $editorCell.hideCursor();

        if( $editorCell.isBlank() && $editorCell.wordBelow.size() == 0 ) {
          $editorCell.removeClass('xw-vend').addClass('xw-samecol');
          cellAbove.removeClass('xw-vmid').addClass('xw-vend');

          $editorCell.wordAbove.each(
            function(i, c) { c.wordBelow = c.wordBelow.not($editorCell); }
          );
          cellAbove.wordBelow = $();
          $editorCell.wordAbove = $();
        }

        $editorCell = cellAbove;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        $editorCell.showCursor();
        addRowHighlighting();
      }
    }
  }

  function moveCursorAhead() {
    if( $horizontalMode ) {
      var cellRight = $editorCell.toRight
      if( $editorCell.wordRight.size() > 0 ) {
        dropColumnHighlighting();
        $editorCell.hideCursor();
        $editorCell = cellRight;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        $editorCell.showCursor();
        addColumnHighlighting();
      } else if( cellRight != null && !$editorCell.isBlank() && !isUnavailable(cellRight) ) {
        dropColumnHighlighting();
        $editorCell.hideCursor();

        if( $editorCell.wordLeft.size() > 0 ) {
          $editorCell.removeClass('xw-hend').addClass('xw-hmid');
          $editorCell.wordLeft.each(
            function(i, c) { c.wordRight = c.wordRight.add(cellRight.domNode); }
          );
          cellRight.wordLeft = $editorCell.wordLeft.add($editorCell);
        } else {
          $editorCell.removeClass('xw-hend');
          $editorCell.wordRight = cellRight.domNode;
          cellRight.wordLeft = $editorCell.domNode;
        }

        cellRight.removeClass('xw-samerow').addClass('xw-hend');
        $editorCell = cellRight;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        addColumnHighlighting();
        $editorCell.showCursor();
      }
    } else {
      var cellBelow = $editorCell.toBelow
      if( $editorCell.wordBelow.size() > 0 ) {
        dropRowHighlighting();
        $editorCell.hideCursor();
        $editorCell = cellBelow;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        $editorCell.showCursor();
        addRowHighlighting();
      } else if( cellBelow != null && !$editorCell.isBlank() && !isUnavailable(cellBelow) ) {
        dropRowHighlighting();
        $editorCell.hideCursor();

        if( $editorCell.wordAbove.size() > 0 ) {
          $editorCell.removeClass('xw-vend').addClass('xw-vmid');
          $editorCell.wordAbove.each(
            function(i, c) { c.wordBelow = c.wordBelow.add(cellBelow.domNode); }
          );
          cellBelow.wordAbove = $editorCell.wordAbove.add($editorCell);
        } else {
          $editorCell.removeClass('xw-vend');
          $editorCell.wordBelow = cellBelow.domNode;
          cellBelow.wordAbove = $editorCell.domNode;
        }

        cellBelow.removeClass('xw-samecol').addClass('xw-hend');
        $editorCell = cellBelow;
        $sameRow    = $($selectRowTmpl.format($editorCell), $rootTable);
        $sameCol    = $($selectColTmpl.format($editorCell), $rootTable);
        addRowHighlighting();
        $editorCell.showCursor();
      }
    }
  }

  function isUnavailable(cellToCheck) {
    var row = cellToCheck.row;
    var col = cellToCheck.col;

    // A cell is available iff it is on the grid (0..10),(0..10) and does not
    // cause any 2x2 block of squares to become fully occupied.
    //
    // Appending an available cell may cause one or two pairs of words to
    // become merged.  The 2x2 constraint effectively limits the number of
    // potential word joins to one horizontal and one vertical.  Words that
    // would get merged by a cell addition do not become merged until the cell
    // actually recieves a keyValue.
    // Canceling the concatenation by striking <ESC> or clicking in a different
    // cell effectively prevents the potential merge by preventing the cell
    // from acquiring a keyValue.
    //
    // A "triad" is any L-shaped group of three cells consisting of a pair of
    // cells that touch corners on a diagonal and one of their two shared
    // adjacencies.  For the sake of this test, only the cell under 
    // consideration forms one, two, or four triads.  In every case, the other
    // triad formed with each of the candidate's cell's triad-formming cell
    // pairs must not exist.

    if( row > 10 || row < 0 || col > 10 || col < 0 ) { return true; }

    if( row == 0 ) {
      if( col == 0 ) {
        // Corner 1 of 4--only one 2x2 block to check.
        if( isFullTriad( 0, 1, 1, 0, 1, 1 ) ) { return true; }
      } else if( col == 10 ) {
        // Corner 2 of 4--only one 2x2 block to check.
        if( isFullTriad( 0, 9, 1, 10, 1, 9 ) ) { return true; }
      } else {
        // Edge 1 of 4--Only two 2x2 blocks to check.
        if( isFullTriad( 0, col+1, 1, col, 1, col+1 ) ) { return true; }
        if( isFullTriad( 0, col-1, 1, col, 1, col-1 ) ) { return true; }
      }
    } else if( row == 10 ) {
      if( col == 0 ) {
        // Corner 3 of 4--only one 2x2 block to check.
        if( isFullTriad( 10, 1, 9, 0, 9, 1 ) ) { return true; }
      } else if( col == 10 ) {
        // Corner 4 of 4--only one 2x2 block to check.
        if( isFullTriad( 10, 9, 9, 10, 9, 9 ) ) { return true; }
      } else {
        // Edge 2 of 4--Only two 2x2 blocks to check.
        // Edge 1 of 4--Only two 2x2 blocks to check.
        if( isFullTriad( 10, col+1, 9, col, 9, col+1 ) ) { return true; }
        if( isFullTriad( 10, col-1, 9, col, 9, col-1 ) ) { return true; }
      }
    } else if( col == 0 ) {
      // Edge 3 of 4--Only two 2x2 blocks to check.
      if( isFullTriad( row+1, 0, row, 1, row+1, 1 ) ) { return true; }
      if( isFullTriad( row-1, 0, row, 1, row-1, 1 ) ) { return true; }
    } else if( col == 10 ) {
      // Edge 4 of 4--Only two 2x2 blocks to check.
      if( isFullTriad( row+1, 10, row, 9, row+1, 9 ) ) { return true; }
      if( isFullTriad( row-1, 10, row, 9, row-1, 9 ) ) { return true; }
    } else {
      // Non-boundary case.  All four 2x2 blocks to check.
      if( isFullTriad( row+1, col, row, col+1, row+1, col+1 ) ) { return true; }
      if( isFullTriad( row+1, col, row, col-1, row+1, col-1 ) ) { return true; }
      if( isFullTriad( row-1, col, row, col+1, row-1, col+1 ) ) { return true; }
      if( isFullTriad( row-1, col, row, col-1, row-1, col-1 ) ) { return true; }
    }
  
    return false;
  }

  function isFullTriad( aRow, aCol, bRow, bCol, cRow, cCol ) {
    var aCell = getCellState(aRow, aCol);
    if( aCell.isBlank() ) { return false; }
    
    var bCell = getCellState(bRow, bCol);
    if( bCell.isBlank() ) { return false; }
    
    var cCell = getCellState(cRow, cCol);
    if( cCell.isBlank() ) { return false; }
    
    return true;
  }

  function addRowHighlighting() {
    var midWord =
      $editorCell.wordLeft.add($editorCell.wordRight).add($editorCell.domNode);
    var nearby = $sameRow.not(midWord);

    var wordTop = $editorCell.wordLeft.first();
    if( wordTop.size() == 0 ) { wordTop = $editorCell.domNode; }

    var wordEnd = $editorCell.wordRight.last();
    if( wordEnd.size() == 0 ) { wordEnd = $editorCell.domNode; }

    midWord = midWord.not(wordTop).not(wordEnd);

    $sameRow.removeClass('xw-inactive');
    nearby.addClass('xw-samerow');
    wordTop.addClass('xw-htop');
    midWord.addClass('xw-hmid');
    wordEnd.addClass('xw-hend');
    $editorCell.addClass('xw-active');
  }

  function dropRowHighlighting() {
    $sameRow.removeClass('xw-active xw-samerow xw-htop xw-hmid xw-hend').addClass('xw-inactive');
  }

  function addColumnHighlighting() {
    var midWord =
      $editorCell.wordAbove.add($editorCell.wordBelow).add($editorCell.domNode);
    var nearby = $sameCol.not(midWord);

    var wordTop = $editorCell.wordAbove.first();
    if( wordTop.size() == 0 ) { wordTop = $editorCell.domNode; }

    var wordEnd = $editorCell.wordBelow.last();
    if( wordEnd.size() == 0 ) { wordEnd = $editorCell.domNode; }

    midWord = midWord.not(wordTop).not(wordEnd);

    $sameCol.removeClass('xw-inactive');
    nearby.addClass('xw-samecol');
    wordTop.addClass('xw-vtop');
    midWord.addClass('xw-vmid');
    wordEnd.addClass('xw-vend');
    $editorCell.addClass('xw-active');
  }

  function dropColumnHighlighting() {
    $sameCol.removeClass('xw-active xw-samecol xw-vtop xw-vmid xw-vend').addClass('xw-inactive');
  }

  function closeWordEditor() {
    $(document).off('keydown', onKeyboardInput);

    dropRowHighlighting();
    dropColumnHighlighting();

    $editorCell.hideCursor();

    $editorCell = null;
    $sameRow = null;
    $sameCol = null;
  }

  initialize();
</script>
